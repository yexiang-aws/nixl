# Jenkins Job Builder (JJB) configuration for NIXL project
# This file defines the CI/CD pipeline structure using Jenkins Job Builder templates
# The configuration is split into two main job templates and a project definition
# NOTE: This file is not used directly, it is used to generate the jobs in the Jenkins UI
#       Any changes to this file can only be deployed by Devops team with permissions

# Template for the dispatcher job that handles GitHub webhook events
# This job acts as the entry point for CI/CD pipeline and manages the build process
- job-template:
    name: "{jjb_proj}-dispatcher"  # Will be expanded to 'nixl-ci-dispatcher'
    project-type: pipeline
    folder: "{jjb_folder}"
    properties:
        # GitHub integration settings
        - github:
            url: "{jjb_gh_url}"
        # Build history retention policy
        - build-discarder:
            days-to-keep: 14        # Keep builds for 14 days
            num-to-keep: 1000        # Or keep last 1000 builds, whichever comes first
        # Inject project-specific variables
        - inject:
            keep-system-variables: true
            properties-content: |
              jjb_proj={jjb_proj}-dispatcher
    # Configure webhook trigger for GitHub events
    triggers:
        - generic-webhook-trigger:
            token: "{jjb_proj}-dispatcher"  # Unique token for webhook identification
            print-contributors: true        # Log who triggered the build
            print-posted-content: true      # Log webhook payload
            silent-response: false          # Return detailed response
            cause: "Generic Cause"
            # Extract data from webhook payload
            post-content-params:
            - type: JSONPath
              key: githubData
              value: $
            - type: JSONPath
              key: VARIABLE_FROM_POST
              value: $
    description: Do NOT edit this job through the Web GUI !  # Manual edits will be overwritten
    concurrent: true    # Allow multiple builds to run simultaneously
    sandbox: true      # Run in sandbox mode for security
    parameters:
        - string:
            name: "VARIABLE_FROM_POST"
            default: ""
            description: ""
    # Pipeline script that handles the build process
    dsl: |
        @Library('blossom-github-lib@master')  // Use custom GitHub library
        import ipp.blossom.*
        // Authenticate with GitHub using stored credentials
        withCredentials([usernamePassword(credentialsId: 'github-token', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {{
          githubHelper = GithubHelper.getInstance("${{GIT_PASSWORD}}", VARIABLE_FROM_POST)
        }}
        // Update GitHub commit status
        githubHelper.updateCommitStatus("$BUILD_URL", "CI Dispatcher started", GitHubCommitState.PENDING)
        currentBuild.description = githubHelper.getBuildDescription()
        try {{
            // Trigger the actual build and test jobs in parallel
            parallel build: {{
                def buildJob = 'nixl-ci-build'
                def build = build job: buildJob, parameters: [
                    string(name: 'sha1', value: githubHelper.getMergedSHA()),
                    string(name: 'githubData', value: VARIABLE_FROM_POST)
                ], propagate: false
                currentBuild.description += "<br>Job: <a href='${{JENKINS_URL}}blue/organizations/jenkins/NIXL%2F${{buildJob}}/detail/${{buildJob}}/${{build.number}}/pipeline/'>${{buildJob}}</a> Result: <b style='color:${{build.result == 'SUCCESS' ? 'green' : 'red'}}'>${{build.result}}</b>"
                if (!build.resultIsBetterOrEqualTo('SUCCESS')) {{
                  currentBuild.result = build.result
                  error("Job ${{buildJob}} failed")
                }}
            }}, test: {{
                def buildJob = 'nixl-ci-test'
                def build = build job: buildJob, parameters: [
                    string(name: 'sha1', value: githubHelper.getMergedSHA()),
                    string(name: 'githubData', value: VARIABLE_FROM_POST)
                ], propagate: false
                currentBuild.description += "<br>Job: <a href='${{JENKINS_URL}}blue/organizations/jenkins/NIXL%2F${{buildJob}}/detail/${{buildJob}}/${{build.number}}/pipeline/'>${{buildJob}}</a> Result: <b style='color:${{build.result == 'SUCCESS' ? 'green' : 'red'}}'>${{build.result}}</b>"
                if (!build.resultIsBetterOrEqualTo('SUCCESS')) {{
                  currentBuild.result = build.result
                  error("Job ${{buildJob}} failed")
                }}
            }},
            failFast: false  // Continue even if some parallel jobs fail

            githubHelper.updateCommitStatus("$BUILD_URL", "CI Dispatcher successeded", GitHubCommitState.SUCCESS)
        }} catch(Exception ex) {{
            // Handle build failures
            currentBuild.result = 'FAILURE'
            println ex
            githubHelper.updateCommitStatus("$BUILD_URL", "CI Dispatcher failed", GitHubCommitState.FAILURE)
            error("failed")
        }}

# Template for the main build job that performs the actual build process
- job-template:
    name: "{jjb_proj}-build"      # Will be expanded to 'nixl-ci-build'
    project-type: pipeline
    folder: "{jjb_folder}"
    disabled: false
    properties:
        # Similar properties as dispatcher job
        - github:
            url: "{jjb_gh_url}"
        - build-discarder:
            days-to-keep: 14
            num-to-keep: 1000
        - inject:
            keep-system-variables: true
            properties-content: |
              jjb_proj={jjb_proj}-build
    description: Do NOT edit this job through the Web GUI !
    concurrent: true
    sandbox: true
    # Build job parameters
    parameters:
        - string:
            name: "sha1"
            default: "{jjb_branch}"    # Default to 'main' branch
            description: "Commit to be checked, usually set by PR"
        - string:
            name: "githubData"
            default: ""
            description: "Variables from post"
        - string:
            name: "conf_file"
            default: ".ci/jenkins/lib/build-matrix.yaml"  # Build matrix configuration
            description: "Job config file"
        - bool:
            name: "build_dockers"
            default: false
            description: "Force rebuild docker containers"
        - string:
            name: "DEBUG"
            default: 0
            description: "Enable debug prints and traces, valid values are 0-9"
    # SCM configuration for the build job
    pipeline-scm:
        scm:
            - git:
                url: "{jjb_git}"
                credentials-id: 'swx-jenkins_ssh_key'
                branches: ['$sha1']
                shallow-clone: false
                do-not-fetch-tags: false
                # Configure refspec to handle branches, PRs, and tags
                refspec: "+refs/heads/*:refs/remotes/origin/* +refs/pull/*:refs/remotes/origin/pr/* +refs/tags/*:refs/remotes/origin/tags/*"
                browser: githubweb
                browser-url: "{jjb_git}"
                # Handle git submodules
                submodule:
                    disable: false
                    recursive: true
                    tracking: true
                    parent-credentials: true
        script-path: "{jjb_jenkinsfile}"  # Path to Jenkinsfile that defines the build steps

# Template for the main test job that performs the actual test process
- job-template:
    name: "{jjb_proj}-test"      # Will be expanded to 'nixl-ci-test'
    project-type: pipeline
    folder: "{jjb_folder}"
    disabled: false
    properties:
        # Similar properties as dispatcher job
        - github:
            url: "{jjb_gh_url}"
        - build-discarder:
            days-to-keep: 14
            num-to-keep: 1000
        - inject:
            keep-system-variables: true
            properties-content: |
              jjb_proj={jjb_proj}-test
    description: Do NOT edit this job through the Web GUI !
    concurrent: true
    sandbox: true
    # Test job parameters
    parameters:
        - string:
            name: "sha1"
            default: "{jjb_branch}"    # Default to 'main' branch
            description: "Commit to be checked, usually set by PR"
        - string:
            name: "githubData"
            default: ""
            description: "Variables from post"
        - string:
            name: "conf_file"
            default: ".ci/jenkins/lib/test-matrix.yaml"  # Test matrix configuration
            description: "Job config file"
        - bool:
            name: "build_dockers"
            default: false
            description: "Force rebuild docker containers"
        - string:
            name: "DEBUG"
            default: 0
            description: "Enable debug prints and traces, valid values are 0-9"
    # SCM configuration for the build job
    pipeline-scm:
        scm:
            - git:
                url: "{jjb_git}"
                credentials-id: 'swx-jenkins_ssh_key'
                branches: ['$sha1']
                shallow-clone: false
                do-not-fetch-tags: false
                # Configure refspec to handle branches, PRs, and tags
                refspec: "+refs/heads/*:refs/remotes/origin/* +refs/pull/*:refs/remotes/origin/pr/* +refs/tags/*:refs/remotes/origin/tags/*"
                browser: githubweb
                browser-url: "{jjb_git}"
                # Handle git submodules
                submodule:
                    disable: false
                    recursive: true
                    tracking: true
                    parent-credentials: true
        script-path: "{jjb_jenkinsfile}"  # Path to Jenkinsfile that defines the build steps

# Template for NIXL build container job
# Builds and pushes NIXL and NIXLBench container images for x86_64 and aarch64
# Supports nightly automatic builds and manual builds via parameters
- job-template:
    name: "{jjb_proj}-build-container"
    project-type: pipeline
    folder: "{jjb_folder}"
    disabled: false
    properties:
      - build-discarder:
          days-to-keep: 30
          num-to-keep: 30
      - inject:
          keep-system-variables: true
          properties-content: |
            jjb_proj={jjb_proj}-build-container
            conf_file=.ci/jenkins/lib/build-container-matrix.yaml
    description: >
      <b>NIXL container build</b><br/>
      • Builds and pushes x86_64 &amp; aarch64 images with any NIXL/UCX version combination<br/>
      • Choose between <b>nixlbench</b> or <b>nixl</b> build targets<br/>
      • Optional latest tag update via <code>UPDATE_LATEST</code> parameter<br/>
      • Images pushed to: <code>verification/nixlbench/</code> or <code>verification/nixl/</code> based on target<br/>
      <br/>
      <i>Do NOT edit this job through the Jenkins GUI &mdash; managed by Jenkins Job Builder.</i>
    concurrent: true
    sandbox: true
    # Nightly scheduler for automatic builds with default versions
    triggers:
      - parameterized-timer:
          cron: |
            # Build nixlbench nightly around 3 AM - Ubuntu 24.04
            H 3 * * * %BUILD_TARGET=nixlbench;UPDATE_LATEST=true
            # Build nixl nightly around 4 AM - Ubuntu 24.04
            H 4 * * * %BUILD_TARGET=nixl;UPDATE_LATEST=true
    # Manual build parameters
    parameters:
      - choice:
          name: "BUILD_TARGET"
          choices:
            - "nixlbench"
            - "nixl"
          description: >
            Build target:<br/>
            • <b>nixlbench</b>: Builds NIXLBench container with benchmark tools<br/>
            • <b>nixl</b>: Builds NIXL library container
      - string:
          name: "NIXL_VERSION"
          default: "{jjb_branch}"
          description: "NIXL version to use (tag like 0.6.0, branch name, or commit hash)"
      - string:
          name: "UCX_VERSION"
          default: "v1.19.0"
          description: "UCX version to use (tag like v1.19.0, branch name, or commit hash)"
      - string:
          name: "BASE_IMAGE"
          default: "nvcr.io/nvidia/cuda-dl-base"
          description: "Base Docker image for the container build"
      - string:
          name: "BASE_IMAGE_TAG"
          default: "25.03-cuda12.8-devel-ubuntu24.04"
          description: "Tag for the base Docker image"
      - string:
          name: "TAG_SUFFIX"
          default: ""
          description: >
            Optional tag suffix. Tag format:<br/>
            <code>&lt;base-image-tag&gt;-&lt;nixl-version&gt;-ucx-&lt;ucx-version&gt;-&lt;arch&gt;[-&lt;suffix&gt;]</code><br/>
      - bool:
          name: "UPDATE_LATEST"
          default: false
          description: >
            Update the latest tag for this architecture.<br/>
            When enabled, also creates: <code>&lt;base-image-tag&gt;-&lt;arch&gt;-latest</code><br/>
            Example: <code>25.03-cuda12.8-devel-ubuntu24.04-aarch64-latest</code><br/>
      - string:
          name: "MAIL_TO"
          default: "25f58ae0.NVIDIA.onmicrosoft.com@amer.teams.ms"
          description: "Email address to send build results (optional)"
    # SCM configuration
    pipeline-scm:
      scm:
        - git:
            url: "{jjb_git}"
            credentials-id: "swx-jenkins_ssh_key"
            branches: ['$NIXL_VERSION']
            shallow-clone: false
            do-not-fetch-tags: false
            refspec: "+refs/heads/*:refs/remotes/origin/* +refs/pull/*:refs/remotes/origin/pr/* +refs/tags/*:refs/remotes/origin/tags/*"
            browser: githubweb
            browser-url: "{jjb_git}"
            submodule:
              disable: false
              recursive: true
              tracking: true
              parent-credentials: true
      script-path: "{jjb_jenkinsfile}"

# Project definition that instantiates the job templates
# This section defines the actual jobs that will be created
- project:
    name: nixl
    jjb_proj: 'nixl-ci'           # Project prefix for job names
    jjb_git: 'git@github.com:ai-dynamo/nixl.git'  # Repository URL
    jjb_jenkinsfile: '.ci/jenkins/pipeline/Jenkinsfile'  # Main pipeline definition
    jjb_folder: 'NIXL'
    jjb_branch: 'main'            # Default branch
    jjb_gh_url: 'https://github.com/ai-dynamo/nixl'  # GitHub web URL
    jobs:
        - "{jjb_proj}-dispatcher"  # Create dispatcher job
        - "{jjb_proj}-build"       # Create build job
        - "{jjb_proj}-build-container"  # Create container builder job
        - "{jjb_proj}-test"        # Create test job
